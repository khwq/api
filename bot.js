// ==========================================
//  KUTOM.DLL | Discord Bot KeyAuth
//  T√°c gi·∫£: Jack 5 C·ªß
// ==========================================

const fs = require('node:fs');
const path = require('node:path');
const express = require('express');
const fetch = require('node-fetch');
const { Client, Collection, GatewayIntentBits, EmbedBuilder } = require('discord.js');
require('dotenv').config();

// ------------------ Discord Client ------------------
const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.commands = new Collection();

// Load l·ªánh t·ª´ th∆∞ m·ª•c ./commands
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.existsSync(commandsPath)
    ? fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'))
    : [];

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    if ('data' in command && 'execute' in command) {
        client.commands.set(command.data.name, command);
    } else {
        console.log(`[C·∫¢NH B√ÅO] L·ªánh t·∫°i ${filePath} thi·∫øu thu·ªôc t√≠nh "data" ho·∫∑c "execute".`);
    }
}

// ------------------ Check quy·ªÅn ------------------
function hasPermission(interaction) {
    const db = JSON.parse(fs.readFileSync('./db.json', 'utf-8'));
    const isOwner = interaction.guild?.ownerId === interaction.user.id;
    const isSupport = db.supportUsers.includes(interaction.user.id);
    return isOwner || isSupport;
}

// ------------------ Event: Ready ------------------
client.once('ready', () => {
    console.log(`‚úÖ Bot ƒë√£ s·∫µn s√†ng! ƒêƒÉng nh·∫≠p v·ªõi t√™n ${client.user.tag}`);
});

// ------------------ Event: Command ------------------
client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    const command = client.commands.get(interaction.commandName);
    if (!command) return;

    if (!hasPermission(interaction)) {
        const noPermsEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('üö´ Truy C·∫≠p B·ªã T·ª´ Ch·ªëi')
            .setDescription('B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.')
            .setTimestamp();

        await interaction.reply({ embeds: [noPermsEmbed], ephemeral: true });
        return;
    }

    try {
        await command.execute(interaction);
    } catch (error) {
        console.error(error);
        const errorEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('‚ùó ƒê√£ c√≥ l·ªói x·∫£y ra!')
            .setDescription('ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.');

        if (interaction.replied || interaction.deferred)
            await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
        else
            await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
});

// ------------------ Login Discord ------------------
client.login(process.env.DISCORD_TOKEN);

// ===================================================
//  Fake Web Server ƒë·ªÉ Render kh√¥ng kill process
// ===================================================
const app = express();

app.get('/', (req, res) => {
    res.send('‚úÖ Bot Discord ƒëang ch·∫°y tr√™n Render!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üåê Fake server ƒëang ch·∫°y t·∫°i c·ªïng ${PORT}`);
});

// ===================================================
//  Keep-alive: Render Free t·ª± sleep n·∫øu kh√¥ng c√≥ traffic
// ===================================================

// G·ª≠i request m·ªói 10 ph√∫t ƒë·ªÉ gi·ªØ service s·ªëng
setInterval(() => {
    fetch(`https://${process.env.RENDER_EXTERNAL_URL || 't√™nservice.onrender.com'}`)
        .then(() => console.log('üîÑ G·ª≠i ping gi·ªØ k·∫øt n·ªëi s·ªëng.'))
        .catch(() => console.log('‚ö†Ô∏è Ping th·∫•t b·∫°i (Render c√≥ th·ªÉ sleep).'));
}, 10 * 60 * 1000); // 10 ph√∫t
